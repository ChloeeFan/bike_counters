{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "647030ac-0aca-444b-9ded-b98acf49fb5d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from pathlib import Path\n",
    "import os\n",
    "from sklearn.model_selection import TimeSeriesSplit\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.linear_model import Ridge\n",
    "from sklearn.pipeline import make_pipeline\n",
    "\n",
    "### Import data\n",
    "\n",
    "data = pd.read_parquet(\"~/Desktop/python X/Project/train.parquet\")\n",
    "data.head()\n",
    "\n",
    "### Data Preprocessing\n",
    "\n",
    "import os\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import TimeSeriesSplit\n",
    "\n",
    "problem_title = \"Bike count prediction\"\n",
    "_target_column_name = \"log_bike_count\"\n",
    "# A type (class) which will be used to create wrapper objects for y_pred\n",
    "\n",
    "\n",
    "def get_cv(X, y, random_state=0):\n",
    "    cv = TimeSeriesSplit(n_splits=8)\n",
    "    rng = np.random.RandomState(random_state)\n",
    "\n",
    "    for train_idx, test_idx in cv.split(X):\n",
    "        # Take a random sampling on test_idx so it's that samples are not consecutives.\n",
    "        yield train_idx, rng.choice(test_idx, size=len(test_idx) // 3, replace=False)\n",
    "\n",
    "\n",
    "def get_train_data(path=\"~/Desktop/python X/Project/train.parquet\"):\n",
    "    data = pd.read_parquet(path)\n",
    "    # Sort by date first, so that time based cross-validation would produce correct results\n",
    "    data = data.sort_values([\"date\", \"counter_name\"])\n",
    "    y_array = data[_target_column_name].values\n",
    "    X_df = data.drop([_target_column_name, \"bike_count\"], axis=1)\n",
    "    return X_df, y_array\n",
    "\n",
    "X,y = get_train_data()\n",
    "\n",
    "def train_test_split_temporal(X, y, delta_threshold=\"30 days\"):\n",
    "    \n",
    "    cutoff_date = X[\"date\"].max() - pd.Timedelta(delta_threshold)\n",
    "    mask = (X[\"date\"] <= cutoff_date)\n",
    "    X_train, X_valid = X.loc[mask], X.loc[~mask]\n",
    "    y_train, y_valid = y[mask], y[~mask]\n",
    "\n",
    "    return X_train, y_train, X_valid, y_valid\n",
    "\n",
    "X_train, y_train, X_valid, y_valid = train_test_split_temporal(X, y)\n",
    "\n",
    "print(\n",
    "    f'Train: n_samples={X_train.shape[0]},  {X_train[\"date\"].min()} to {X_train[\"date\"].max()}'\n",
    ")\n",
    "print(\n",
    "    f'Valid: n_samples={X_valid.shape[0]},  {X_valid[\"date\"].min()} to {X_valid[\"date\"].max()}'\n",
    ")\n",
    "\n",
    "from sklearn.ensemble import HistGradientBoostingRegressor\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import FunctionTransformer\n",
    "from sklearn.metrics import root_mean_squared_error\n",
    "\n",
    "target_column = \"log_bike_count\"\n",
    "\n",
    "# Define features and target\n",
    "X_train = X_train.drop(columns=[\"site_id\",\"counter_id\", \"counter_technical_id\", \"counter_installation_date\", \"coordinates\"])\n",
    "X_valid = X_valid.drop(columns=[\"site_id\",\"counter_id\", \"counter_technical_id\", \"counter_installation_date\", \"coordinates\"])\n",
    "\n",
    "\n",
    "### XGBoosting\n",
    "\n",
    "#### Parameter Tuning\n",
    "\n",
    "from xgboost import XGBRegressor\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.preprocessing import FunctionTransformer, OneHotEncoder\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import numpy as np\n",
    "\n",
    "# Define the date encoding function\n",
    "def encode_dates(X):\n",
    "    X = X.copy()\n",
    "    X[\"year\"] = X[\"date\"].dt.year\n",
    "    X[\"month\"] = X[\"date\"].dt.month\n",
    "    X[\"day\"] = X[\"date\"].dt.day\n",
    "    X[\"hour\"] = X[\"date\"].dt.hour\n",
    "    X[\"weekday\"] = X[\"date\"].dt.weekday\n",
    "    X[\"hour_weekday\"] = X[\"hour\"] + X[\"weekday\"] * 24  # Interaction term\n",
    "    return X.drop(columns=[\"date\"])\n",
    "\n",
    "# Define preprocessors\n",
    "date_encoder = FunctionTransformer(encode_dates)\n",
    "categorical_encoder = OneHotEncoder(handle_unknown=\"ignore\", sparse_output=False)\n",
    "\n",
    "# Combine preprocessors\n",
    "preprocessor = ColumnTransformer(\n",
    "    transformers=[\n",
    "        (\"date\", date_encoder, [\"date\"]),\n",
    "        (\"cat\", categorical_encoder, [\"counter_name\", \"site_name\"]),\n",
    "    ],\n",
    "    remainder=\"passthrough\"\n",
    ")\n",
    "\n",
    "# Define the pipeline\n",
    "pipe = Pipeline(steps=[\n",
    "    (\"preprocessor\", preprocessor),\n",
    "    (\"regressor\", XGBRegressor(random_state=42, n_jobs=-1))\n",
    "])\n",
    "\n",
    "# Define the parameter grid for tuning\n",
    "param_distributions = {\n",
    "    \"regressor__n_estimators\": [100, 200, 300],\n",
    "    \"regressor__learning_rate\": [0.01, 0.05, 0.1, 0.2],\n",
    "    \"regressor__max_depth\": [3, 5, 7, 10],\n",
    "    \"regressor__min_child_weight\": [1, 3, 5],\n",
    "    \"regressor__subsample\": [0.6, 0.8, 1.0],\n",
    "    \"regressor__colsample_bytree\": [0.6, 0.8, 1.0],\n",
    "    \"regressor__gamma\": [0, 0.1, 0.2, 0.3]\n",
    "}\n",
    "\n",
    "# Use RandomizedSearchCV for tuning\n",
    "random_search = RandomizedSearchCV(\n",
    "    estimator=pipe,\n",
    "    param_distributions=param_distributions,\n",
    "    n_iter=50,  # Number of random samples to try\n",
    "    cv=3,  # 3-fold cross-validation\n",
    "    scoring=\"neg_root_mean_squared_error\",  # Metric for evaluation\n",
    "    verbose=2,\n",
    "    random_state=42,\n",
    "    n_jobs=-1\n",
    ")\n",
    "\n",
    "# Fit the model with randomized search\n",
    "random_search.fit(X_train, y_train)\n",
    "\n",
    "# Best parameters and model\n",
    "print(\"Best parameters:\", random_search.best_params_)\n",
    "best_model = random_search.best_estimator_\n",
    "\n",
    "# Evaluate RMSE for Train and Validation sets\n",
    "print(\n",
    "    f\"Train set, RMSE={mean_squared_error(y_train, best_model.predict(X_train), squared=False):.5f}\"\n",
    ")\n",
    "print(\n",
    "    f\"Valid set, RMSE={mean_squared_error(y_valid, best_model.predict(X_valid), squared=False):.5f}\"\n",
    ")\n",
    "\n",
    "\n",
    "# Extract the best parameters\n",
    "best_params = random_search.best_params_\n",
    "\n",
    "# Train the model with the best parameters\n",
    "final_model = Pipeline(steps=[\n",
    "    (\"preprocessor\", preprocessor),\n",
    "    (\"regressor\", XGBRegressor(\n",
    "        subsample=best_params['regressor__subsample'],\n",
    "        n_estimators=best_params['regressor__n_estimators'],\n",
    "        min_child_weight=best_params['regressor__min_child_weight'],\n",
    "        max_depth=best_params['regressor__max_depth'],\n",
    "        learning_rate=best_params['regressor__learning_rate'],\n",
    "        gamma=best_params['regressor__gamma'],\n",
    "        colsample_bytree=best_params['regressor__colsample_bytree'],\n",
    "        random_state=42,\n",
    "        n_jobs=-1\n",
    "    ))\n",
    "])\n",
    "\n",
    "# Fit the model on the full training set\n",
    "final_model.fit(X_train, y_train)\n",
    "\n",
    "# Evaluate RMSE for Train and Validation sets\n",
    "train_rmse = mean_squared_error(y_train, final_model.predict(X_train), squared=False)\n",
    "valid_rmse = mean_squared_error(y_valid, final_model.predict(X_valid), squared=False)\n",
    "\n",
    "print(f\"Final Model - Train set RMSE: {train_rmse:.5f}\")\n",
    "print(f\"Final Model - Valid set RMSE: {valid_rmse:.5f}\")\n",
    "\n",
    "\n",
    "#### Hyperparameter Optimization\n",
    "\n",
    "import optuna\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from xgboost import XGBRegressor\n",
    "\n",
    "def objective(trial):\n",
    "    # Suggest hyperparameters\n",
    "    params = {\n",
    "        \"n_estimators\": trial.suggest_int(\"n_estimators\", 100, 500),\n",
    "        \"learning_rate\": trial.suggest_float(\"learning_rate\", 0.01, 0.2),\n",
    "        \"max_depth\": trial.suggest_int(\"max_depth\", 3, 10),\n",
    "        \"min_child_weight\": trial.suggest_int(\"min_child_weight\", 1, 10),\n",
    "        \"subsample\": trial.suggest_float(\"subsample\", 0.6, 1.0),\n",
    "        \"colsample_bytree\": trial.suggest_float(\"colsample_bytree\", 0.6, 1.0),\n",
    "        \"gamma\": trial.suggest_float(\"gamma\", 0, 0.5),\n",
    "    }\n",
    "\n",
    "    # Create a pipeline with the suggested parameters\n",
    "    pipe = Pipeline(steps=[\n",
    "        (\"preprocessor\", preprocessor),\n",
    "        (\"regressor\", XGBRegressor(random_state=42, **params))\n",
    "    ])\n",
    "    \n",
    "    # Fit and evaluate\n",
    "    pipe.fit(X_train, y_train)\n",
    "    y_valid_pred = pipe.predict(X_valid)\n",
    "    rmse = mean_squared_error(y_valid, y_valid_pred, squared=False)\n",
    "    return rmse\n",
    "\n",
    "# Create and run the study\n",
    "study = optuna.create_study(direction=\"minimize\")\n",
    "study.optimize(objective, n_trials=30)\n",
    "\n",
    "# Display the best parameters\n",
    "print(\"Best parameters:\", study.best_params)\n",
    "\n",
    "# Train the model with the best parameters\n",
    "best_params = study.best_params\n",
    "final_xg_model = Pipeline(steps=[\n",
    "    (\"preprocessor\", preprocessor),\n",
    "    (\"regressor\", XGBRegressor(random_state=42, **best_params))\n",
    "])\n",
    "final_xg_model.fit(X_train, y_train)\n",
    "\n",
    "# Evaluate Train and Validation RMSE\n",
    "train_rmse = mean_squared_error(y_train, final_xg_model.predict(X_train), squared=False)\n",
    "valid_rmse = mean_squared_error(y_valid, final_xg_model.predict(X_valid), squared=False)\n",
    "\n",
    "print(f\"Final XGboost Model - Train RMSE: {train_rmse:.5f}\")\n",
    "print(f\"Final XGboost Model - Validation RMSE: {valid_rmse:.5f}\")\n",
    "\n",
    "\n",
    "final_xg_model.fit(X_train, y_train)\n",
    "\n",
    "# Evaluate Train and Validation RMSE\n",
    "train_rmse = mean_squared_error(y_train, final_xg_model.predict(X_train), squared=False)\n",
    "valid_rmse = mean_squared_error(y_valid, final_xg_model.predict(X_valid), squared=False)\n",
    "\n",
    "print(f\"Final XGboost Model - Train RMSE: {train_rmse:.5f}\")\n",
    "print(f\"Final XGboost Model - Validation RMSE: {valid_rmse:.5f}\")\n",
    "\n",
    "\n",
    "### CatBoost\n",
    "\n",
    "from catboost import CatBoostRegressor\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "# Function to preprocess date\n",
    "def preprocess_datetime(data):\n",
    "    data = data.copy()\n",
    "    data[\"year\"] = data[\"date\"].dt.year\n",
    "    data[\"month\"] = data[\"date\"].dt.month\n",
    "    data[\"day\"] = data[\"date\"].dt.day\n",
    "    data[\"hour\"] = data[\"date\"].dt.hour\n",
    "    data[\"weekday\"] = data[\"date\"].dt.weekday\n",
    "    data[\"hour_weekday\"] = data[\"hour\"] + data[\"weekday\"] * 24  # Interaction term\n",
    "    return data.drop(columns=[\"date\"])  # Drop the original datetime column\n",
    "\n",
    "# Apply preprocessing to the train and validation datasets\n",
    "X_train_preprocessed = preprocess_datetime(X_train)\n",
    "X_valid_preprocessed = preprocess_datetime(X_valid)\n",
    "\n",
    "# Specify categorical feature indices (relative to preprocessed data)\n",
    "categorical_features = [\"counter_name\", \"site_name\"]\n",
    "cat_features_indices = [X_train_preprocessed.columns.get_loc(col) for col in categorical_features]\n",
    "\n",
    "# Train CatBoostRegressor\n",
    "cat_model = CatBoostRegressor(\n",
    "    iterations=1000,\n",
    "    learning_rate=0.1,\n",
    "    depth=5,\n",
    "    random_seed=42,\n",
    "    cat_features=cat_features_indices,\n",
    "    verbose=100\n",
    ")\n",
    "cat_model.fit(\n",
    "    X_train_preprocessed, y_train,\n",
    "    eval_set=(X_valid_preprocessed, y_valid),\n",
    "    early_stopping_rounds=50\n",
    ")\n",
    "\n",
    "# Evaluate Train and Validation RMSE\n",
    "train_rmse = mean_squared_error(y_train, cat_model.predict(X_train_preprocessed), squared=False)\n",
    "valid_rmse = mean_squared_error(y_valid, cat_model.predict(X_valid_preprocessed), squared=False)\n",
    "\n",
    "print(f\"CatBoost - Train set, RMSE={train_rmse:.5f}\")\n",
    "print(f\"CatBoost - Valid set, RMSE={valid_rmse:.5f}\")\n",
    "\n",
    "\n",
    "import optuna\n",
    "from catboost import CatBoostRegressor\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "def objective(trial):\n",
    "    # Suggest hyperparameters for CatBoost\n",
    "    params = {\n",
    "        \"iterations\": trial.suggest_int(\"iterations\", 500, 2000),\n",
    "        \"learning_rate\": trial.suggest_float(\"learning_rate\", 0.01, 0.3),\n",
    "        \"depth\": trial.suggest_int(\"depth\", 4, 10),\n",
    "        \"l2_leaf_reg\": trial.suggest_float(\"l2_leaf_reg\", 1, 10),\n",
    "        \"random_strength\": trial.suggest_float(\"random_strength\", 1, 10),\n",
    "        \"bootstrap_type\": trial.suggest_categorical(\"bootstrap_type\", [\"Bayesian\", \"Bernoulli\", \"MVS\"]),\n",
    "    }\n",
    "\n",
    "    # Only add `subsample` if bootstrap type is not Bayesian\n",
    "    if params[\"bootstrap_type\"] != \"Bayesian\":\n",
    "        params[\"subsample\"] = trial.suggest_float(\"subsample\", 0.6, 1.0)\n",
    "\n",
    "    # Add bagging temperature for Bayesian bootstrap\n",
    "    if params[\"bootstrap_type\"] == \"Bayesian\":\n",
    "        params[\"bagging_temperature\"] = trial.suggest_float(\"bagging_temperature\", 0, 10)\n",
    "\n",
    "    # Create and train the CatBoost model\n",
    "    model = CatBoostRegressor(\n",
    "        cat_features=cat_features_indices,\n",
    "        random_seed=42,\n",
    "        verbose=0,\n",
    "        **params\n",
    "    )\n",
    "    model.fit(X_train_preprocessed, y_train, eval_set=(X_valid_preprocessed, y_valid), early_stopping_rounds=50)\n",
    "\n",
    "    # Calculate RMSE for validation set\n",
    "    valid_rmse = mean_squared_error(y_valid, model.predict(X_valid_preprocessed), squared=False)\n",
    "    return valid_rmse\n",
    "\n",
    "# Create an Optuna study and optimize\n",
    "study = optuna.create_study(direction=\"minimize\")\n",
    "study.optimize(objective, n_trials=10, timeout=3600)  # Run 50 trials or stop after 1 hour\n",
    "\n",
    "# Display the best parameters and RMSE\n",
    "print(\"Best parameters:\", study.best_params)\n",
    "print(f\"Best Validation RMSE: {study.best_value:.5f}\")\n",
    "\n",
    "# Train final model with the best parameters\n",
    "best_params = study.best_params\n",
    "final_cat_model = CatBoostRegressor(\n",
    "    cat_features=cat_features_indices,\n",
    "    random_seed=42,\n",
    "    verbose=100,\n",
    "    **best_params\n",
    ")\n",
    "final_cat_model.fit(X_train_preprocessed, y_train, eval_set=(X_valid_preprocessed, y_valid), early_stopping_rounds=50)\n",
    "\n",
    "# Evaluate Train and Validation RMSE\n",
    "train_rmse = mean_squared_error(y_train, final_cat_model.predict(X_train_preprocessed), squared=False)\n",
    "valid_rmse = mean_squared_error(y_valid, final_cat_model.predict(X_valid_preprocessed), squared=False)\n",
    "\n",
    "print(f\"Final CatBoost Model - Train RMSE: {train_rmse:.5f}\")\n",
    "print(f\"Final CatBoost Model - Validation RMSE: {valid_rmse:.5f}\")\n",
    "\n",
    "\n",
    "### Stacking(Catboost and Xgboost)\n",
    "\n",
    "from catboost import CatBoostRegressor\n",
    "from xgboost import XGBRegressor\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "\n",
    "final_cat_model.fit(X_train_preprocessed, y_train, eval_set=(X_valid_preprocessed, y_valid), early_stopping_rounds=50)\n",
    "final_cat_model.predict(X_valid_preprocessed)\n",
    "\n",
    "final_xg_model.fit(X_train, y_train)\n",
    "final_xg_model.predict(X_valid)\n",
    "\n",
    "cat_preds = final_cat_model.predict(X_valid_preprocessed)\n",
    "xgb_preds = final_xg_model.predict(X_valid)\n",
    "\n",
    "# Combine predictions as features for stacking\n",
    "stacked_features_full = np.vstack((cat_preds, xgb_preds)).T\n",
    "\n",
    "# Split stacked features for meta-model training and validation\n",
    "X_train_meta, X_valid_meta, y_train_meta, y_valid_meta = train_test_split(\n",
    "    stacked_features_full, y_valid, test_size=0.2, random_state=42\n",
    ")\n",
    "\n",
    "# Train the Ridge regression model as the meta-model\n",
    "meta_model = Ridge(alpha=1.0)\n",
    "meta_model.fit(X_train_meta, y_train_meta)\n",
    "\n",
    "# Predict on the validation meta-set\n",
    "meta_preds = meta_model.predict(X_valid_meta)\n",
    "\n",
    "# Calculate and print the RMSE for the stacked model\n",
    "meta_rmse = mean_squared_error(y_valid_meta, meta_preds, squared=False)\n",
    "print(f\"Stacked Ensemble Model - Validation RMSE: {meta_rmse:.5f}\")\n",
    "\n",
    "test = pd.read_parquet(\"~/Desktop/python X/Project/final_test.parquet\")\n",
    "\n",
    "test.head()\n",
    "\n",
    "test_data = test.drop(columns=[\"counter_id\", \"counter_technical_id\", \"counter_installation_date\", \"coordinates\"])\n",
    "\n",
    "test_data\n",
    "\n",
    "X_test_preprocessed = preprocess_datetime(test_data)\n",
    "\n",
    "# Prepare CatBoost Pool for prediction\n",
    "cat_features_indices = [X_test_preprocessed.columns.get_loc(col) for col in categorical_columns]  # Indices of categorical columns\n",
    "test_pool = Pool(data=X_test_preprocessed, cat_features=cat_features_indices)\n",
    "\n",
    "categorical_columns\n",
    "\n",
    "from catboost import Pool\n",
    "\n",
    "# Prepare CatBoost Pool for prediction\n",
    "cat_features_indices = [X_test_preprocessed.columns.get_loc(col) for col in categorical_columns]  # Indices of categorical columns\n",
    "test_pool = Pool(data=X_test_preprocessed, cat_features=cat_features_indices)\n",
    "\n",
    "\n",
    "# Predict using CatBoost\n",
    "cat_preds_test = final_cat_model.predict(test_pool)\n",
    "xgb_preds = final_xg_model.predict(test_data)\n",
    "\n",
    "# Ensure the test data preprocessing aligns for both models\n",
    "assert len(X_test_preprocessed) == len(X_test), \"Mismatch in preprocessed test data sizes!\"\n",
    "\n",
    "# Generate predictions from CatBoost and XGBoost\n",
    "cat_preds_test = final_cat_model.predict(Pool(data=X_test_preprocessed, cat_features=cat_features_indices))\n",
    "xgb_preds_test = final_xg_model.predict(X_test)\n",
    "\n",
    "# Ensure predictions have the same length\n",
    "assert len(cat_preds_test) == len(xgb_preds_test), \"Mismatch in predictions sizes!\"\n",
    "\n",
    "# Combine predictions as features for the stacked model\n",
    "stacked_features_test = np.vstack((cat_preds_test, xgb_preds_test)).T\n",
    "\n",
    "# Generate final predictions using the already trained meta-model\n",
    "final_predictions = meta_model.predict(stacked_features_test)\n",
    "\n",
    "\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "# Assuming `final_predictions` is your array of predicted values for the test set\n",
    "# And `test_data` is your DataFrame containing the test data\n",
    "\n",
    "results = pd.DataFrame(\n",
    "    dict(\n",
    "        Id=np.arange(final_predictions.shape[0]),  # Create an Id column from 0 to len(final_predictions) - 1\n",
    "        log_bike_count=final_predictions,  # Assign predictions to the log_bike_count column\n",
    "    )\n",
    ")\n",
    "\n",
    "# Save the submission file\n",
    "results.to_csv(\"submission.csv\", index=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
